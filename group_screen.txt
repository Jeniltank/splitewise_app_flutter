import 'package:flutter/material.dart';
import 'package:splitewise_flutter/Firebase_services/database_service_for_add_group.dart';
import 'package:splitewise_flutter/group_Screen_Child/add_Group.dart'
    as AddGroupChild; // Use a prefix to disambiguate
import 'package:splitewise_flutter/group_Screen_Child/group_Listview_data.dart';
import 'package:splitewise_flutter/models/group.dart';

class GroupScreen extends StatefulWidget {
  final String userId;

  const GroupScreen({
    Key? key,
    required this.userId,
    required List groups,
    required String groupName,
    required String groupType,
  }) : super(key: key);

  @override
  State<GroupScreen> createState() => _GroupScreenState();
}

class _GroupScreenState extends State<GroupScreen> {
  final DatabaseServiceForAddGroup _databaseService =
      DatabaseServiceForAddGroup();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black87,
      appBar: AppBar(
        backgroundColor: Colors.green,
        automaticallyImplyLeading: false,
        actions: [
          IconButton(
            icon: Icon(Icons.search, color: Colors.white),
            onPressed: () {
              // Add your onPressed logic for the search icon here
            },
          ),
          IconButton(
            icon: Icon(Icons.group, color: Colors.white),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) =>
                      AddGroupChild.AddGroup(), // Use the prefix
                ),
              );
            },
          ),
        ],
        centerTitle: true,
        title: Text(
          "Group Screen",
          style: TextStyle(color: Colors.white),
        ),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            SizedBox(
              height: 30,
            ),
            Container(
              decoration: BoxDecoration(
                color: Colors.green,
                border: Border.all(color: Colors.green),
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: TextButton.icon(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) =>
                          AddGroupChild.AddGroup(), // Use the prefix
                    ),
                  );
                },
                icon: Icon(
                  Icons.group,
                  color: Colors.white,
                ),
                label: Text(
                  "Start new Group",
                  style: TextStyle(color: Colors.white, fontSize: 20),
                ),
                style: TextButton.styleFrom(
                  backgroundColor: Colors.transparent,
                  padding:
                      EdgeInsets.symmetric(vertical: 16.0, horizontal: 24.0),
                ),
              ),
            ),
            SizedBox(height: 20),
            Expanded(
              child: StreamBuilder<List<Group>>(
                stream: _databaseService.getGroupsForUser(widget.userId),
                builder: (context, snapshot) {
                  if (snapshot.hasError) {
                    return Center(
                      child: Text('Error: ${snapshot.error}'),
                    );
                  }
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return Center(
                      child: CircularProgressIndicator(),
                    );
                  }
                  List<Group>? groups = snapshot.data;
                  if (groups == null || groups.isEmpty) {
                    return Center(
                      child: Text('No Groups Found'),
                    );
                  }
                  return ListView.builder(
                    itemCount: groups.length,
                    itemBuilder: (context, index) {
                      Group group = groups[index];
                      return Card(
                        color: Colors.green,
                        elevation: 2,
                        margin:
                            EdgeInsets.symmetric(vertical: 10, horizontal: 20),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: ListTile(
                          contentPadding: EdgeInsets.symmetric(
                              vertical: 10, horizontal: 20),
                          leading: Icon(
                            Icons.group,
                            color: Colors.white,
                          ),
                          title: Text(
                            group.groupName,
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 18,
                              color: Colors.white,
                            ),
                          ),
                          subtitle: Text(
                            'Type: ${group.groupType}',
                            style: TextStyle(
                              fontStyle: FontStyle.italic,
                              color: Colors.white,
                            ),
                          ),
                          trailing: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              IconButton(
                                icon: Icon(Icons.delete, color: Colors.white),
                                onPressed: () {
                                  showDialog(
                                    context: context,
                                    builder: (BuildContext context) {
                                      return AlertDialog(
                                        title: Text('Confirm Deletion'),
                                        content: Text(
                                            'Are you sure you want to delete this group?'),
                                        actions: <Widget>[
                                          TextButton(
                                            onPressed: () {
                                              Navigator.of(context).pop();
                                            },
                                            child: Text('Cancel'),
                                          ),
                                          TextButton(
                                            onPressed: () async {
                                              await _databaseService
                                                  .deleteGroup(group.groupId);
                                              Navigator.of(context).pop();
                                            },
                                            child: Text('Delete'),
                                          ),
                                        ],
                                      );
                                    },
                                  );
                                },
                              ),
                            ],
                          ),
                          onTap: () {
                            Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) =>
                                      GroupListView(group: group),
                                ));
                          },
                        ),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class AddGroupScreen {}
***************************************************************18-3-24********************************************************************
import 'package:cloud_firestore/cloud_firestore.dart'; // Import Firestore
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:splitewise_flutter/Firebase_services/database_service_for_add_group.dart';
import 'package:splitewise_flutter/group_Screen_Child/add_Group.dart'
    as AddGroupChild; // Use a prefix to disambiguate
import 'package:splitewise_flutter/models/group.dart';

import '../group_Screen_Child/group_Listview_data.dart';

class GroupScreen extends StatefulWidget {
  final String userId;

  const GroupScreen({
    Key? key,
    required this.userId,
    required List groups,
    required String groupType,
    required String groupName,
  }) : super(key: key);

  @override
  State<GroupScreen> createState() => _GroupScreenState();
}

class _GroupScreenState extends State<GroupScreen> {
  final DatabaseServiceForAddGroup _databaseService =
      DatabaseServiceForAddGroup();
  final FirebaseFirestore _firestore =
      FirebaseFirestore.instance; // Firestore instance

  Future<void> deleteGroup(String groupId) async {
    try {
      await _firestore.collection('groups').doc(groupId).delete();
    } catch (error) {
      print('Error deleting group: $error');
      throw error;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black87,
      appBar: AppBar(
        backgroundColor: Colors.green,
        automaticallyImplyLeading: false,
        actions: [
          IconButton(
            icon: Icon(Icons.search, color: Colors.white),
            onPressed: () {
              // Add your onPressed logic for the search icon here
            },
          ),
          IconButton(
            icon: Icon(Icons.group, color: Colors.white),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) =>
                      AddGroupChild.AddGroup(), // Use the prefix
                ),
              );
            },
          ),
        ],
        centerTitle: true,
        title: Text(
          "Group Screen",
          style: TextStyle(color: Colors.white),
        ),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            SizedBox(
              height: 30,
            ),
            Container(
              decoration: BoxDecoration(
                color: Colors.green,
                border: Border.all(color: Colors.green),
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: TextButton.icon(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) =>
                          AddGroupChild.AddGroup(), // Use the prefix
                    ),
                  );
                },
                icon: Icon(
                  Icons.group,
                  color: Colors.white,
                ),
                label: Text(
                  "Start new Group",
                  style: TextStyle(color: Colors.white, fontSize: 20),
                ),
                style: TextButton.styleFrom(
                  backgroundColor: Colors.transparent,
                  padding:
                      EdgeInsets.symmetric(vertical: 16.0, horizontal: 24.0),
                ),
              ),
            ),
            SizedBox(height: 20),
            Expanded(
              child: StreamBuilder<List<Group>>(
                stream: _databaseService.getGroups(),
                builder: (context, snapshot) {
                  if (snapshot.hasError) {
                    return Center(
                      child: Text('Error: ${snapshot.error}'),
                    );
                  }
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return Center(
                      child: CircularProgressIndicator(),
                    );
                  }
                  List<Group>? groups = snapshot.data;
                  if (groups == null || groups.isEmpty) {
                    return Center(
                      child: Text('No Groups Found'),
                    );
                  }

                  // Get current user's ID using Firebase Authentication
                  User? currentUser = FirebaseAuth.instance.currentUser;
                  String? currentUserID = currentUser?.uid;

                  List<Group> userGroups = groups
                      .where((group) => group.creatorUserId == currentUserID)
                      .toList();

                  if (userGroups.isEmpty) {
                    return Center(
                      child: Text('You haven\'t created any groups yet.'),
                    );
                  }

                  return ListView.builder(
                    itemCount: userGroups.length,
                    itemBuilder: (context, index) {
                      Group group = userGroups[index];
                      return Card(
                        color: Colors.green,
                        elevation: 2,
                        margin:
                            EdgeInsets.symmetric(vertical: 5, horizontal: 5),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: ListTile(
                          contentPadding: EdgeInsets.symmetric(
                              vertical: 20, horizontal: 20),
                          leading: Icon(
                            Icons.group,
                            color: Colors.white,
                          ),
                          title: Text(
                            group.groupName,
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 18,
                              color: Colors.white,
                            ),
                          ),
                          subtitle: Text(
                            'Type: ${group.groupType}',
                            style: TextStyle(
                              fontStyle: FontStyle.italic,
                              color: Colors.white,
                            ),
                          ),
                          trailing: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              IconButton(
                                icon: Icon(
                                  Icons.delete,
                                  color: Colors.white,
                                ),
                                onPressed: () async {
                                  bool confirmed = await showDialog(
                                    context: context,
                                    builder: (context) => AlertDialog(
                                      title: Text("Confirm Deletion"),
                                      content: Text(
                                          "Are you sure you want to delete this group?"),
                                      actions: [
                                        TextButton(
                                          onPressed: () {
                                            Navigator.pop(context, false);
                                          },
                                          child: Text("Cancel"),
                                        ),
                                        TextButton(
                                          onPressed: () {
                                            Navigator.pop(context, true);
                                          },
                                          child: Text("Delete"),
                                        ),
                                      ],
                                    ),
                                  );
                                  if (confirmed == true) {
                                    try {
                                      await deleteGroup(group
                                          .groupId); // Pass the groupId here
                                    } catch (error) {
                                      print("Error deleting group: $error");
                                    }
                                  }
                                },
                              ),
                            ],
                          ),
                          onTap: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) => GroupListView(
                                  groupName: group.groupName,
                                  groupType: group.groupType,
                                ),
                              ),
                            );
                          },
                        ),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
